using System;
using System.Linq;
using System.Runtime.InteropServices;

namespace AmazonDashUI
{
    /// <summary>
    /// Operation codes in the DHCPMessage
    /// </summary>
    internal enum OperationCode
    {
        /// <summary>DHCP request</summary>
        Request = 1,

        /// <summary>DHCP reply</summary>
        Reply = 2
    }

    /// <summary>
    /// DHCP hardware address type
    /// </summary>
    internal enum HardwareType
    {
        /// <summary>10Mb Ethernet</summary>
        Ethernet = 1
    }

    /// <summary>
    /// The header structure of a DHCP message
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    internal struct DHCPMessage
    {
        /// <summary>Request or reply</summary>
        internal byte OperationCode;

        /// <summary>Hardware address type</summary>
        internal byte HardwareType;

        /// <summary>Length of the hardware address, usually 6 (for IEEE 802 MAC addresses)</summary>
        internal byte HardwareAddressLength;

        /// <summary>Set to zero by the client, and used to control the forwarding of messages</summary>
        internal byte Hops;

        /// <summary>A 32 bit id generated by the client to match replies with requests</summary>
        internal uint TransactionIdentifier;

        /// <summary>The number of seconds elapsed since a client began an attempt to acquire or renew a lease</summary>
        internal ushort Seconds;

        /// <summary>Broadcast flag and other reserved bits</summary>
        internal ushort Flags;

        /// <summary>This may be the clients IP address</summary>
        internal uint ClientIPAddress;

        /// <summary>The IP address the server is assigning to the client</summary>
        internal uint YourIPAddress;

        /// <summary>The address of the server that the client should use for the next step in the bootstrap process</summary>
        internal uint ServerIPAddress;

        /// <summary>For routing BOOTP messages</summary>
        internal uint GatewayIPAddress;

        /// <summary>The hardware address of the client</summary>
        internal byte ClientHardwareAddress0;

        /// <summary>The hardware address of the client</summary>
        internal byte ClientHardwareAddress1;

        /// <summary>The hardware address of the client</summary>
        internal byte ClientHardwareAddress2;

        /// <summary>The hardware address of the client</summary>
        internal byte ClientHardwareAddress3;

        /// <summary>The hardware address of the client</summary>
        internal byte ClientHardwareAddress4;

        /// <summary>The hardware address of the client</summary>
        internal byte ClientHardwareAddress5;

        /// <summary>The hardware address of the client</summary>
        internal byte ClientHardwareAddress6;

        /// <summary>The hardware address of the client</summary>
        internal byte ClientHardwareAddress7;

        /// <summary>This may contain the server name</summary>
        internal ulong ServerName0;

        /// <summary>This may contain the server name</summary>
        internal ulong ServerName1;

        /// <summary>This may contain the server name</summary>
        internal ulong ServerName2;

        /// <summary>This may contain the server name</summary>
        internal ulong ServerName3;

        /// <summary>This may contain the server name</summary>
        internal ulong ServerName4;

        /// <summary>This may contain the server name</summary>
        internal ulong ServerName5;

        /// <summary>This may contain the server name</summary>
        internal ulong ServerName6;

        /// <summary>This may contain the server name</summary>
        internal ulong ServerName7;

        /// <summary>Optional field</summary>
        internal ulong BootFileName0;

        /// <summary>Optional field</summary>
        internal ulong BootFileName1;
    }

    /// <summary>
    /// A helper class to provide access to a DHCP header
    /// </summary>
    internal class DHCPMessageHelper
    {
        /// <summary>
        /// The DHCP message to access
        /// </summary>
        private DHCPMessage dhcpMessage;

        /// <summary>
        /// Initializes a new instance of the <see cref="DHCPMessageHelper" /> class.
        /// </summary>
        /// <param name="rawBytes">A raw message</param>
        /// <param name="bytesRead">The number of valid bytes in the message</param>
        internal DHCPMessageHelper(byte[] rawBytes, int bytesRead)
        {
            var headerSize = Marshal.SizeOf<DHCPMessage>();
            if (bytesRead < headerSize)
            {
                throw new Exception("The header is not large enough");
            }

            var ptr = Marshal.AllocHGlobal(headerSize);
            try
            {
                Marshal.Copy(rawBytes, 0, ptr, headerSize);
                this.dhcpMessage = (DHCPMessage)Marshal.PtrToStructure(ptr, typeof(DHCPMessage));
            }
            finally
            {
                Marshal.FreeHGlobal(ptr);
            }
        }

        /// <summary>
        /// Access the operation code in the DHCP message
        /// </summary>
        internal OperationCode OperationCode => (OperationCode)this.dhcpMessage.OperationCode;

        /// <summary>
        /// Access the hardware type in the DHCP message
        /// </summary>
        internal HardwareType HardwareType => (HardwareType)this.dhcpMessage.HardwareType;

        /// <summary>
        /// Access the client address in the DHCP message
        /// </summary>
        internal string ClientHardwareAddress => string.Format($"{this.dhcpMessage.ClientHardwareAddress0:X2}:{this.dhcpMessage.ClientHardwareAddress1:X2}:{this.dhcpMessage.ClientHardwareAddress2:X2}:{this.dhcpMessage.ClientHardwareAddress3:X2}:{this.dhcpMessage.ClientHardwareAddress4:X2}:{this.dhcpMessage.ClientHardwareAddress5:X2}:{this.dhcpMessage.ClientHardwareAddress6:X2}:{this.dhcpMessage.ClientHardwareAddress7:X2}").Substring(0, (this.dhcpMessage.HardwareAddressLength * 3) - 1);

        /// <inheritdoc/>
        public override string ToString()
        {
            return $"OpCode:{this.OperationCode} Hardware:{this.HardwareType} ClientHardwareAddress:{this.ClientHardwareAddress}";
        }
    }
}
